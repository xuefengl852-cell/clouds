{"name": "验证是否出现绑定网盘弹窗", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: The instrumentation process cannot be initialized within 30000ms timeout. Make sure the application under test does not crash and investigate the logcat output. You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability. \nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: The instrumentation process cannot be initialized within 30000ms timeout. Make sure the application under test does not crash and investigate the logcat output. You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability. \n    at getResponseForW3CError (C:\\Program Files\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\errors.js:804:9)\n    at asyncHandler (C:\\Program Files\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:388:37)\n    at process._tickCallback (internal/process/next_tick.js:68:7)", "trace": "request = <SubRequest 'app_driver' for <Function test_bind_cloud>>\n\n    @pytest.fixture(scope=\"session\")\n    def app_driver(request):\n        # 获取命令行参数\n        device_id = request.config.getoption(\"--device-id\", default=None)\n        app_package = request.config.getoption(\"--app-package\", default=\"com.example.app\")\n        app_activity = request.config.getoption(\"--app-activity\", default=\".MainActivity\")\n    \n        # 执行智能清理\n        clean_database(device_id)\n        \"\"\"创建并返回Appium driver\"\"\"\n>       driver = init_driver()\n                 ^^^^^^^^^^^^^\n\n..\\..\\..\\..\\conftest.py:413: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\utils\\driver.py:22: in init_driver\n    driver = webdriver.Remote(\nD:\\python\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:238: in __init__\n    super().__init__(\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:257: in __init__\n    self.start_session(capabilities)\nD:\\python\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:329: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015631B9D1D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...iver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:388:37)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: The instrumentation process cannot be initialized within 30000ms timeout. Make sure the application under test does not crash and investigate the logcat output. You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability. \nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: The instrumentation process cannot be initialized within 30000ms timeout. Make sure the application under test does not crash and investigate the logcat output. You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability. \nE           at getResponseForW3CError (C:\\Program Files\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\errors.js:804:9)\nE           at asyncHandler (C:\\Program Files\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:388:37)\nE           at process._tickCallback (internal/process/next_tick.js:68:7)\n\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "attachments": [{"name": "log", "source": "699baf34-8e4f-48d1-8e5f-37e8e468a9b6-attachment.txt", "type": "text/plain"}], "start": 1755153498545, "stop": 1755153498545, "uuid": "5310bc92-36e3-4d01-9a66-f2aea152ac02", "historyId": "fb1a78a4b515e04275bb227c4c8a2e89", "testCaseId": "fb1a78a4b515e04275bb227c4c8a2e89", "fullName": "testcase.account_rename.nut_cloud.positive.test_home.TestHomeScenarios#test_bind_cloud", "labels": [{"name": "feature", "value": "主页登录模块"}, {"name": "story", "value": "用户点击绑定网盘"}, {"name": "epic", "value": "坚果云网盘详情页"}, {"name": "parentSuite", "value": "testcase.account_rename.nut_cloud.positive"}, {"name": "suite", "value": "test_home"}, {"name": "subSuite", "value": "TestHomeScenarios"}, {"name": "host", "value": "hv-test"}, {"name": "thread", "value": "36028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.account_rename.nut_cloud.positive.test_home"}]}