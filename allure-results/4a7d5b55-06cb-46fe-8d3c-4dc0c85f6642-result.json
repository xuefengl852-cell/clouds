{"name": "验证是否网盘显示模式变为视图模式", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: A new session could not be created. Details: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\nStacktrace:\nio.appium.uiautomator2.common.exceptions.SessionNotCreatedException: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\n\tat io.appium.uiautomator2.handler.NewSession.safeHandle(NewSession.java:59)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:38)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:252)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:242)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:44)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:1012)\nCaused by: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\n\tat android.app.UiAutomation.throwIfNotConnectedLocked(UiAutomation.java:1640)\n\tat android.app.UiAutomation.setOnAccessibilityEventListener(UiAutomation.java:496)\n\tat androidx.test.uiautomator.QueryController.<init>(QueryController.java:95)\n\tat androidx.test.uiautomator.UiDevice.<init>(UiDevice.java:109)\n\tat androidx.test.uiautomator.UiDevice.getInstance(UiDevice.java:261)\n\tat io.appium.uiautomator2.utils.Device.getUiDevice(Device.java:25)\n\tat io.appium.uiautomator2.core.UiAutomatorBridge.getUiAutomation(UiAutomatorBridge.java:52)\n\tat io.appium.uiautomator2.core.UiAutomation.<init>(UiAutomation.java:32)\n\tat io.appium.uiautomator2.core.UiAutomation.getInstance(UiAutomation.java:37)\n\tat io.appium.uiautomator2.model.NotificationListener.<init>(NotificationListener.java:42)\n\tat io.appium.uiautomator2.model.NotificationListener.getInstance(NotificationListener.java:47)\n\tat io.appium.uiautomator2.handler.NewSession.safeHandle(NewSession.java:52)\n\t... 30 more", "trace": "request = <SubRequest 'app_driver' for <Function test_switch_view>>\n\n    @pytest.fixture(scope=\"session\")\n    def app_driver(request):\n        # 获取命令行参数\n        device_id = request.config.getoption(\"--device-id\", default=None)\n        app_package = request.config.getoption(\"--app-package\", default=\"com.example.app\")\n        app_activity = request.config.getoption(\"--app-activity\", default=\".MainActivity\")\n    \n        # 执行智能清理\n        clean_database(device_id)\n        \"\"\"创建并返回Appium driver\"\"\"\n>       driver = init_driver()\n                 ^^^^^^^^^^^^^\n\n..\\..\\..\\conftest.py:413: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\utils\\driver.py:22: in init_driver\n    driver = webdriver.Remote(\nD:\\python\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:238: in __init__\n    super().__init__(\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:257: in __init__\n    self.start_session(capabilities)\nD:\\python\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:329: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020DD64F0250>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"A new session could not be created. Detai...ener.java:47)\\\\n\\\\tat io.appium.uiautomator2.handler.NewSession.safeHandle(NewSession.java:52)\\\\n\\\\t... 30 more\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: A new session could not be created. Details: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\nE       Stacktrace:\nE       io.appium.uiautomator2.common.exceptions.SessionNotCreatedException: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\nE       \tat io.appium.uiautomator2.handler.NewSession.safeHandle(NewSession.java:59)\nE       \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:38)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:252)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:242)\nE       \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:44)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE       \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE       \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE       \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE       \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE       \tat java.lang.Thread.run(Thread.java:1012)\nE       Caused by: java.lang.IllegalStateException: UiAutomation not connected, UiAutomation@32b914f[id=-1, displayId=0, flags=0]\nE       \tat android.app.UiAutomation.throwIfNotConnectedLocked(UiAutomation.java:1640)\nE       \tat android.app.UiAutomation.setOnAccessibilityEventListener(UiAutomation.java:496)\nE       \tat androidx.test.uiautomator.QueryController.<init>(QueryController.java:95)\nE       \tat androidx.test.uiautomator.UiDevice.<init>(UiDevice.java:109)\nE       \tat androidx.test.uiautomator.UiDevice.getInstance(UiDevice.java:261)\nE       \tat io.appium.uiautomator2.utils.Device.getUiDevice(Device.java:25)\nE       \tat io.appium.uiautomator2.core.UiAutomatorBridge.getUiAutomation(UiAutomatorBridge.java:52)\nE       \tat io.appium.uiautomator2.core.UiAutomation.<init>(UiAutomation.java:32)\nE       \tat io.appium.uiautomator2.core.UiAutomation.getInstance(UiAutomation.java:37)\nE       \tat io.appium.uiautomator2.model.NotificationListener.<init>(NotificationListener.java:42)\nE       \tat io.appium.uiautomator2.model.NotificationListener.getInstance(NotificationListener.java:47)\nE       \tat io.appium.uiautomator2.handler.NewSession.safeHandle(NewSession.java:52)\nE       \t... 30 more\n\nD:\\python\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "40f6992f-2853-46f9-bd56-3513f81a7ad0-attachment.txt", "type": "text/plain"}], "start": 1755260430572, "stop": 1755260430572, "uuid": "25d6a942-ac46-4934-8b85-4612e7527e50", "historyId": "ee38d36878266b995026f93433f33500", "testCaseId": "ee38d36878266b995026f93433f33500", "fullName": "testcase.account_rename.nut_cloud.test_clouds_more.TestCloudsMore#test_switch_view", "labels": [{"name": "story", "value": "用户切换视图模式"}, {"name": "epic", "value": "网盘首页点击更多按钮出现弹窗"}, {"name": "feature", "value": "更多模块"}, {"name": "parentSuite", "value": "testcase.account_rename.nut_cloud"}, {"name": "suite", "value": "test_clouds_more"}, {"name": "subSuite", "value": "TestCloudsMore"}, {"name": "host", "value": "hv-test"}, {"name": "thread", "value": "43012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.account_rename.nut_cloud.test_clouds_more"}]}